"""
DrawML
Data processing template file
Templates will be changed by appropriate value

There is some issues in input data
and maybe save model
"""
import tensorflow as tf
import numpy as np
import sys
import os

{% include 'tensorflow_configuration' %}


shapes  = {{shapes}}
file_ids = {{file_ids}}
require  = "{{require}}"
output_file_path = None


def load_input():
    argc = len(sys.argv)
    if argc < 2:
        print('No input argument')
        sys.exit(-1)

    file_count = int(sys.argv[1])
    # this file name, input file num, [input_files], output_file_path
    if file_count + 3 < len(sys.argv):
        print('Wrong argument')
        sys.exit(-1)

    files = dict()
    for i in range(file_count):
        file_path = sys.argv[2 + i]
        if os.path.isfile(file_path) is False:
            print('No such file or directory', file_path)
            sys.exit(2)
        file = np.genfromtxt(file_path, dtype='float32', skip_header=1)
        files[file_ids[i]] = file
    global output_file_path
    output_file_path = str(sys.argv[file_count + 2])
    return files


def concat(data, shape):
    """
    Add several same shape data
    Param
    data  : list of data
    shape : shape of result

    if shape is not compatible it throw Value error
    """
    for i in range(len(data)):
        tf.reshape(data[i], [-1])
    concatenated = tf.concat(0, data)
    result = tf.reshape(concatenated, shape)

    global config
    return result.eval(session=tf.Session(config=config))


def transpose(data):
    result = tf.transpose(data)

    global config
    return result.eval(session=tf.Session(config=config))


def save_require(name):
    if name != require:
        return
    with open(output_file_path, 'ab') as f:
        for shape in shapes:
            if len(shape) == 0:
                continue
            num = 1
            for n in shape:
                num *= n
            f.write((str(num) + ' ').encode())
        f.write(b'\n')
        np.savetxt(f, files[name], delimiter=' ')


{% raw %}
with tf.device("{{device}}"):
{% endraw %}
    files = load_input()

{% for unit in processing %}
{% if unit.type == 'concat' %}
    unit_data = {{unit.data}}
    unit_shape = {{unit.shape}}
    input_data = []
    for data in unit_data:
        input_data.append(files[data])
    unit_name = "{{unit.name}}"
    files[unit_name] = concat(input_data, unit_shape)
    save_require(unit_name)

{% endif %}
{% if unit.type == 'transpose' %}
    unit_data = {{unit.data}}
    unit_name = "{{unit.name}}"
    files[unit_name] = transpose(files[unit_data[0]])
    save_require(unit_name)

{% endif %}
{% endfor %}
